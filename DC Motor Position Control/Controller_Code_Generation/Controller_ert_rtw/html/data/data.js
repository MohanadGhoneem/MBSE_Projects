var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Controller","ref":false,"files":[{"name":"Controller.c","type":"source","group":"model","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\Controller_Code_Generation\\Controller_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: Controller.c\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.13\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 01:02:18 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Controller.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* Model step function */\r\nvoid Controller_step(RT_MODEL *const rtM, real_T rtU_refPos, real_T\r\n                     rtU_feedbackPos, real_T *rtY_controlSignal)\r\n{\r\n  DW *rtDW = rtM->dwork;\r\n\r\n  /* local block i/o variables */\r\n  real_T rtb_IntegralGain;\r\n  real_T errorPos;\r\n  real_T u0;\r\n\r\n  /* Sum: '<Root>/Sum' incorporates:\r\n   *  Inport: '<Root>/feedbackPos'\r\n   *  Inport: '<Root>/refPos'\r\n   */\r\n  errorPos = rtU_refPos - rtU_feedbackPos;\r\n\r\n  /* Sum: '<S42>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S33>/Integrator'\r\n   *  Gain: '<S38>/Proportional Gain'\r\n   */\r\n  u0 = rtP.PIDController_P * errorPos + rtDW->Integrator_DSTATE;\r\n\r\n  /* Saturate: '<S40>/Saturation' */\r\n  if (u0 > rtP.PIDController_UpperSaturationLi) {\r\n    /* Outport: '<Root>/controlSignal' */\r\n    *rtY_controlSignal = rtP.PIDController_UpperSaturationLi;\r\n  } else if (u0 < rtP.PIDController_LowerSaturationLi) {\r\n    /* Outport: '<Root>/controlSignal' */\r\n    *rtY_controlSignal = rtP.PIDController_LowerSaturationLi;\r\n  } else {\r\n    /* Outport: '<Root>/controlSignal' */\r\n    *rtY_controlSignal = u0;\r\n  }\r\n\r\n  /* End of Saturate: '<S40>/Saturation' */\r\n\r\n  /* Gain: '<S30>/Integral Gain' */\r\n  rtb_IntegralGain = rtP.PIDController_I * errorPos;\r\n\r\n  /* Update for DiscreteIntegrator: '<S33>/Integrator' */\r\n  rtDW->Integrator_DSTATE += rtP.Integrator_gainval * rtb_IntegralGain;\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n   * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n   * overflow during the application lifespan selected.\r\n   * Timer of this task consists of two 32 bit unsigned integers.\r\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n   */\r\n  if (!(++rtM->Timing.clockTick0)) {\r\n    ++rtM->Timing.clockTickH0;\r\n  }\r\n\r\n  rtM->Timing.t[0] = rtM->Timing.clockTick0 * rtM->Timing.stepSize0 +\r\n    rtM->Timing.clockTickH0 * rtM->Timing.stepSize0 * 4294967296.0;\r\n\r\n  {\r\n    /* Update absolute timer for sample time: [1.0E-5s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 1.0E-5, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     * Timer of this task consists of two 32 bit unsigned integers.\r\n     * The two integers represent the low bits Timing.clockTick1 and the high bits\r\n     * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\r\n     */\r\n    rtM->Timing.clockTick1++;\r\n    if (!rtM->Timing.clockTick1) {\r\n      rtM->Timing.clockTickH1++;\r\n    }\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Controller_initialize(RT_MODEL *const rtM, real_T *rtU_refPos, real_T\r\n  *rtU_feedbackPos, real_T *rtY_controlSignal)\r\n{\r\n  DW *rtDW = rtM->dwork;\r\n\r\n  /* Registration code */\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);\r\n    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));\r\n    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);\r\n    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));\r\n    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);\r\n  rtsiSetSolverName(&rtM->solverInfo,\"FixedStepDiscrete\");\r\n  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);\r\n  rtM->Timing.stepSize0 = 1.0E-5;\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)rtDW, 0,\r\n                sizeof(DW));\r\n\r\n  /* external inputs */\r\n  *rtU_refPos = 0.0;\r\n  *rtU_feedbackPos = 0.0;\r\n\r\n  /* external outputs */\r\n  *rtY_controlSignal = 0.0;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S33>/Integrator' */\r\n  rtDW->Integrator_DSTATE = rtP.PIDController_InitialConditionF;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Controller.h","type":"header","group":"model","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\Controller_Code_Generation\\Controller_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: Controller.h\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.13\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 01:02:18 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Controller_h_\r\n#define RTW_HEADER_Controller_h_\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#ifndef Controller_COMMON_INCLUDES_\r\n#define Controller_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* Controller_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetRootDWork\r\n#define rtmGetRootDWork(rtm)           ((rtm)->dwork)\r\n#endif\r\n\r\n#ifndef rtmSetRootDWork\r\n#define rtmSetRootDWork(rtm, val)      ((rtm)->dwork = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n#define Controller_M                   (rtM)\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Integrator_DSTATE;            /* '<S33>/Integrator' */\r\n} DW;\r\n\r\n/* Parameters (default storage) */\r\nstruct P_ {\r\n  real_T PIDController_I;              /* Mask Parameter: PIDController_I\r\n                                        * Referenced by: '<S30>/Integral Gain'\r\n                                        */\r\n  real_T PIDController_InitialConditionF;\r\n                              /* Mask Parameter: PIDController_InitialConditionF\r\n                               * Referenced by: '<S33>/Integrator'\r\n                               */\r\n  real_T PIDController_LowerSaturationLi;\r\n                              /* Mask Parameter: PIDController_LowerSaturationLi\r\n                               * Referenced by: '<S40>/Saturation'\r\n                               */\r\n  real_T PIDController_P;              /* Mask Parameter: PIDController_P\r\n                                        * Referenced by: '<S38>/Proportional Gain'\r\n                                        */\r\n  real_T PIDController_UpperSaturationLi;\r\n                              /* Mask Parameter: PIDController_UpperSaturationLi\r\n                               * Referenced by: '<S40>/Saturation'\r\n                               */\r\n  real_T Integrator_gainval;           /* Computed Parameter: Integrator_gainval\r\n                                        * Referenced by: '<S33>/Integrator'\r\n                                        */\r\n};\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_ P;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  DW *dwork;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    uint32_T clockTickH1;\r\n    SimTimeStep simTimeStep;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block parameters (default storage) */\r\nextern P rtP;\r\n\r\n/* Model entry point functions */\r\nextern void Controller_initialize(RT_MODEL *const rtM, real_T *rtU_refPos,\r\n  real_T *rtU_feedbackPos, real_T *rtY_controlSignal);\r\nextern void Controller_step(RT_MODEL *const rtM, real_T rtU_refPos, real_T\r\n  rtU_feedbackPos, real_T *rtY_controlSignal);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Rate Transition' : Eliminated since input and output rates are identical\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Controller'\r\n * '<S1>'   : 'Controller/PID Controller'\r\n * '<S2>'   : 'Controller/PID Controller/Anti-windup'\r\n * '<S3>'   : 'Controller/PID Controller/D Gain'\r\n * '<S4>'   : 'Controller/PID Controller/Filter'\r\n * '<S5>'   : 'Controller/PID Controller/Filter ICs'\r\n * '<S6>'   : 'Controller/PID Controller/I Gain'\r\n * '<S7>'   : 'Controller/PID Controller/Ideal P Gain'\r\n * '<S8>'   : 'Controller/PID Controller/Ideal P Gain Fdbk'\r\n * '<S9>'   : 'Controller/PID Controller/Integrator'\r\n * '<S10>'  : 'Controller/PID Controller/Integrator ICs'\r\n * '<S11>'  : 'Controller/PID Controller/N Copy'\r\n * '<S12>'  : 'Controller/PID Controller/N Gain'\r\n * '<S13>'  : 'Controller/PID Controller/P Copy'\r\n * '<S14>'  : 'Controller/PID Controller/Parallel P Gain'\r\n * '<S15>'  : 'Controller/PID Controller/Reset Signal'\r\n * '<S16>'  : 'Controller/PID Controller/Saturation'\r\n * '<S17>'  : 'Controller/PID Controller/Saturation Fdbk'\r\n * '<S18>'  : 'Controller/PID Controller/Sum'\r\n * '<S19>'  : 'Controller/PID Controller/Sum Fdbk'\r\n * '<S20>'  : 'Controller/PID Controller/Tracking Mode'\r\n * '<S21>'  : 'Controller/PID Controller/Tracking Mode Sum'\r\n * '<S22>'  : 'Controller/PID Controller/Tsamp - Integral'\r\n * '<S23>'  : 'Controller/PID Controller/Tsamp - Ngain'\r\n * '<S24>'  : 'Controller/PID Controller/postSat Signal'\r\n * '<S25>'  : 'Controller/PID Controller/preSat Signal'\r\n * '<S26>'  : 'Controller/PID Controller/Anti-windup/Passthrough'\r\n * '<S27>'  : 'Controller/PID Controller/D Gain/Disabled'\r\n * '<S28>'  : 'Controller/PID Controller/Filter/Disabled'\r\n * '<S29>'  : 'Controller/PID Controller/Filter ICs/Disabled'\r\n * '<S30>'  : 'Controller/PID Controller/I Gain/Internal Parameters'\r\n * '<S31>'  : 'Controller/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S32>'  : 'Controller/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S33>'  : 'Controller/PID Controller/Integrator/Discrete'\r\n * '<S34>'  : 'Controller/PID Controller/Integrator ICs/Internal IC'\r\n * '<S35>'  : 'Controller/PID Controller/N Copy/Disabled wSignal Specification'\r\n * '<S36>'  : 'Controller/PID Controller/N Gain/Disabled'\r\n * '<S37>'  : 'Controller/PID Controller/P Copy/Disabled'\r\n * '<S38>'  : 'Controller/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S39>'  : 'Controller/PID Controller/Reset Signal/Disabled'\r\n * '<S40>'  : 'Controller/PID Controller/Saturation/Enabled'\r\n * '<S41>'  : 'Controller/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S42>'  : 'Controller/PID Controller/Sum/Sum_PI'\r\n * '<S43>'  : 'Controller/PID Controller/Sum Fdbk/Disabled'\r\n * '<S44>'  : 'Controller/PID Controller/Tracking Mode/Disabled'\r\n * '<S45>'  : 'Controller/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S46>'  : 'Controller/PID Controller/Tsamp - Integral/Passthrough'\r\n * '<S47>'  : 'Controller/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S48>'  : 'Controller/PID Controller/postSat Signal/Forward_Path'\r\n * '<S49>'  : 'Controller/PID Controller/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* RTW_HEADER_Controller_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Controller_data.c","type":"source","group":"data","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\Controller_Code_Generation\\Controller_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: Controller_data.c\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.13\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 01:02:18 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Controller.h\"\r\n\r\n/* Block parameters (default storage) */\r\nP rtP = {\r\n  /* Mask Parameter: PIDController_I\r\n   * Referenced by: '<S30>/Integral Gain'\r\n   */\r\n  1750.0,\r\n\r\n  /* Mask Parameter: PIDController_InitialConditionF\r\n   * Referenced by: '<S33>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PIDController_LowerSaturationLi\r\n   * Referenced by: '<S40>/Saturation'\r\n   */\r\n  -5.0,\r\n\r\n  /* Mask Parameter: PIDController_P\r\n   * Referenced by: '<S38>/Proportional Gain'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PIDController_UpperSaturationLi\r\n   * Referenced by: '<S40>/Saturation'\r\n   */\r\n  5.0,\r\n\r\n  /* Computed Parameter: Integrator_gainval\r\n   * Referenced by: '<S33>/Integrator'\r\n   */\r\n  1.0E-5\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\Controller_Code_Generation\\Controller_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.13\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 01:02:18 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\Controller_Code_Generation\\Controller_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.13\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 01:02:18 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"Controller.h\"\r\n\r\n/*\r\n * ROOT_IO_FORMAT: 0 (Individual arguments)\r\n * ROOT_IO_FORMAT: 1 (Structure reference)\r\n * ROOT_IO_FORMAT: 2 (Part of model data structure)\r\n */\r\n#define ROOT_IO_FORMAT                 0\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};