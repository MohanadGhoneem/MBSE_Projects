var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Controller","ref":true,"files":[{"name":"Controller.c","type":"source","group":"model","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\slprj\\ert\\Controller","tag":"","groupDisplay":"Model files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: Controller.c\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 00:39:59 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Controller.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        ((rtmGetSimTimeStep((rtm))) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        ((rtmGetSimTimeStep((rtm))) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         (*((rtm)->errorStatus))\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    (*((rtm)->errorStatus) = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatusPointer\r\n#define rtmGetErrorStatusPointer(rtm)  (rtm)->errorStatus\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatusPointer\r\n#define rtmSetErrorStatusPointer(rtm, val) ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetSimTimeStep\r\n#define rtmGetSimTimeStep(rtm)         (*((rtm)->Timing.simTimeStep))\r\n#endif\r\n\r\n#ifndef rtmGetSimTimeStepPointer\r\n#define rtmGetSimTimeStepPointer(rtm)  (rtm)->Timing.simTimeStep\r\n#endif\r\n\r\n#ifndef rtmSetSimTimeStepPointer\r\n#define rtmSetSimTimeStepPointer(rtm, val) ((rtm)->Timing.simTimeStep = (val))\r\n#endif\r\n\r\nController_P ControllerrtP = {\r\n  /* Mask Parameter: PIDController_I\r\n   * Referenced by: '<S30>/Integral Gain'\r\n   */\r\n  1750.0,\r\n\r\n  /* Mask Parameter: PIDController_InitialConditionF\r\n   * Referenced by: '<S33>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Mask Parameter: PIDController_LowerSaturationLi\r\n   * Referenced by: '<S40>/Saturation'\r\n   */\r\n  -5.0,\r\n\r\n  /* Mask Parameter: PIDController_P\r\n   * Referenced by: '<S38>/Proportional Gain'\r\n   */\r\n  100.0,\r\n\r\n  /* Mask Parameter: PIDController_UpperSaturationLi\r\n   * Referenced by: '<S40>/Saturation'\r\n   */\r\n  5.0,\r\n\r\n  /* Computed Parameter: Integrator_gainval\r\n   * Referenced by: '<S33>/Integrator'\r\n   */\r\n  1.0E-5\r\n};\r\n\r\n/* System initialize for referenced model: 'Controller' */\r\nvoid Controller_Init(Controller_DW_f *localDW)\r\n{\r\n  /* InitializeConditions for DiscreteIntegrator: '<S33>/Integrator' */\r\n  localDW->Integrator_DSTATE = ControllerrtP.PIDController_InitialConditionF;\r\n}\r\n\r\n/* Outputs for referenced model: 'Controller' */\r\nvoid Controller(Controller_RT_MODEL * const ControllerrtM, const real_T\r\n                *rtu_refPos, const real_T *rtu_feedbackPos, real_T\r\n                *rty_controlSignal, Controller_DW_f *localDW)\r\n{\r\n  real_T errorPos;\r\n\r\n  /* Sum: '<Root>/Sum' */\r\n  errorPos = *rtu_refPos - *rtu_feedbackPos;\r\n  if (rtmIsMajorTimeStep(ControllerrtM)) {\r\n    /* Gain: '<S30>/Integral Gain' */\r\n    localDW->IntegralGain = ControllerrtP.PIDController_I * errorPos;\r\n\r\n    /* RateTransition: '<Root>/Rate Transition' */\r\n    if (rtmIsMajorTimeStep(ControllerrtM)) {\r\n      /* Sum: '<S42>/Sum' incorporates:\r\n       *  DiscreteIntegrator: '<S33>/Integrator'\r\n       *  Gain: '<S38>/Proportional Gain'\r\n       */\r\n      errorPos = ControllerrtP.PIDController_P * errorPos +\r\n        localDW->Integrator_DSTATE;\r\n\r\n      /* Saturate: '<S40>/Saturation' */\r\n      if (errorPos > ControllerrtP.PIDController_UpperSaturationLi) {\r\n        *rty_controlSignal = ControllerrtP.PIDController_UpperSaturationLi;\r\n      } else if (errorPos < ControllerrtP.PIDController_LowerSaturationLi) {\r\n        *rty_controlSignal = ControllerrtP.PIDController_LowerSaturationLi;\r\n      } else {\r\n        *rty_controlSignal = errorPos;\r\n      }\r\n\r\n      /* End of Saturate: '<S40>/Saturation' */\r\n    }\r\n\r\n    /* End of RateTransition: '<Root>/Rate Transition' */\r\n  }\r\n}\r\n\r\n/* Update for referenced model: 'Controller' */\r\nvoid Controller_Update(Controller_RT_MODEL * const ControllerrtM,\r\n  Controller_DW_f *localDW)\r\n{\r\n  if (rtmIsMajorTimeStep(ControllerrtM)) {\r\n    /* Update for DiscreteIntegrator: '<S33>/Integrator' */\r\n    localDW->Integrator_DSTATE += ControllerrtP.Integrator_gainval *\r\n      localDW->IntegralGain;\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Controller_initialize(const char_T **rt_errorStatus, RTWSolverInfo\r\n  *rt_solverInfo, Controller_RT_MODEL *const ControllerrtM, Controller_DW_f\r\n  *localDW)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)ControllerrtM, 0,\r\n                sizeof(Controller_RT_MODEL));\r\n\r\n  /* initialize error status */\r\n  rtmSetErrorStatusPointer(ControllerrtM, rt_errorStatus);\r\n\r\n  /* initialize RTWSolverInfo */\r\n  ControllerrtM->solverInfo = (rt_solverInfo);\r\n\r\n  /* Set the Timing fields to the appropriate data in the RTWSolverInfo */\r\n  rtmSetSimTimeStepPointer(ControllerrtM, rtsiGetSimTimeStepPtr\r\n    (ControllerrtM->solverInfo));\r\n  ControllerrtM->Timing.stepSize0 = (rtsiGetStepSize(ControllerrtM->solverInfo));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)localDW, 0,\r\n                sizeof(Controller_DW_f));\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Controller.h","type":"header","group":"model","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\slprj\\ert\\Controller","tag":"","groupDisplay":"Model files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: Controller.h\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 00:39:59 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Controller_h_\r\n#define RTW_HEADER_Controller_h_\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#ifndef Controller_COMMON_INCLUDES_\r\n#define Controller_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* Controller_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct Controller_tag_RTM Controller_RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for model 'Controller' */\r\ntypedef struct {\r\n  real_T IntegralGain;                 /* '<S30>/Integral Gain' */\r\n  real_T Integrator_DSTATE;            /* '<S33>/Integrator' */\r\n} Controller_DW_f;\r\n\r\n/* Parameters (default storage) */\r\nstruct Controller_P_ {\r\n  real_T PIDController_I;              /* Mask Parameter: PIDController_I\r\n                                        * Referenced by: '<S30>/Integral Gain'\r\n                                        */\r\n  real_T PIDController_InitialConditionF;\r\n                              /* Mask Parameter: PIDController_InitialConditionF\r\n                               * Referenced by: '<S33>/Integrator'\r\n                               */\r\n  real_T PIDController_LowerSaturationLi;\r\n                              /* Mask Parameter: PIDController_LowerSaturationLi\r\n                               * Referenced by: '<S40>/Saturation'\r\n                               */\r\n  real_T PIDController_P;              /* Mask Parameter: PIDController_P\r\n                                        * Referenced by: '<S38>/Proportional Gain'\r\n                                        */\r\n  real_T PIDController_UpperSaturationLi;\r\n                              /* Mask Parameter: PIDController_UpperSaturationLi\r\n                               * Referenced by: '<S40>/Saturation'\r\n                               */\r\n  real_T Integrator_gainval;           /* Computed Parameter: Integrator_gainval\r\n                                        * Referenced by: '<S33>/Integrator'\r\n                                        */\r\n};\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct Controller_P_ Controller_P;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct Controller_tag_RTM {\r\n  const char_T **errorStatus;\r\n  RTWSolverInfo *solverInfo;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    time_T stepSize0;\r\n    SimTimeStep *simTimeStep;\r\n  } Timing;\r\n};\r\n\r\ntypedef struct {\r\n  Controller_DW_f rtdw;\r\n  Controller_RT_MODEL rtm;\r\n} Controller_MdlrefDW;\r\n\r\nextern Controller_P ControllerrtP;\r\n\r\n/* Model reference registration function */\r\nextern void Controller_initialize(const char_T **rt_errorStatus, RTWSolverInfo\r\n  *rt_solverInfo, Controller_RT_MODEL *const ControllerrtM, Controller_DW_f\r\n  *localDW);\r\nextern void Controller_Init(Controller_DW_f *localDW);\r\nextern void Controller_Update(Controller_RT_MODEL * const ControllerrtM,\r\n  Controller_DW_f *localDW);\r\nextern void Controller(Controller_RT_MODEL * const ControllerrtM, const real_T\r\n  *rtu_refPos, const real_T *rtu_feedbackPos, real_T *rty_controlSignal,\r\n  Controller_DW_f *localDW);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Controller'\r\n * '<S1>'   : 'Controller/PID Controller'\r\n * '<S2>'   : 'Controller/PID Controller/Anti-windup'\r\n * '<S3>'   : 'Controller/PID Controller/D Gain'\r\n * '<S4>'   : 'Controller/PID Controller/Filter'\r\n * '<S5>'   : 'Controller/PID Controller/Filter ICs'\r\n * '<S6>'   : 'Controller/PID Controller/I Gain'\r\n * '<S7>'   : 'Controller/PID Controller/Ideal P Gain'\r\n * '<S8>'   : 'Controller/PID Controller/Ideal P Gain Fdbk'\r\n * '<S9>'   : 'Controller/PID Controller/Integrator'\r\n * '<S10>'  : 'Controller/PID Controller/Integrator ICs'\r\n * '<S11>'  : 'Controller/PID Controller/N Copy'\r\n * '<S12>'  : 'Controller/PID Controller/N Gain'\r\n * '<S13>'  : 'Controller/PID Controller/P Copy'\r\n * '<S14>'  : 'Controller/PID Controller/Parallel P Gain'\r\n * '<S15>'  : 'Controller/PID Controller/Reset Signal'\r\n * '<S16>'  : 'Controller/PID Controller/Saturation'\r\n * '<S17>'  : 'Controller/PID Controller/Saturation Fdbk'\r\n * '<S18>'  : 'Controller/PID Controller/Sum'\r\n * '<S19>'  : 'Controller/PID Controller/Sum Fdbk'\r\n * '<S20>'  : 'Controller/PID Controller/Tracking Mode'\r\n * '<S21>'  : 'Controller/PID Controller/Tracking Mode Sum'\r\n * '<S22>'  : 'Controller/PID Controller/Tsamp - Integral'\r\n * '<S23>'  : 'Controller/PID Controller/Tsamp - Ngain'\r\n * '<S24>'  : 'Controller/PID Controller/postSat Signal'\r\n * '<S25>'  : 'Controller/PID Controller/preSat Signal'\r\n * '<S26>'  : 'Controller/PID Controller/Anti-windup/Passthrough'\r\n * '<S27>'  : 'Controller/PID Controller/D Gain/Disabled'\r\n * '<S28>'  : 'Controller/PID Controller/Filter/Disabled'\r\n * '<S29>'  : 'Controller/PID Controller/Filter ICs/Disabled'\r\n * '<S30>'  : 'Controller/PID Controller/I Gain/Internal Parameters'\r\n * '<S31>'  : 'Controller/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S32>'  : 'Controller/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S33>'  : 'Controller/PID Controller/Integrator/Discrete'\r\n * '<S34>'  : 'Controller/PID Controller/Integrator ICs/Internal IC'\r\n * '<S35>'  : 'Controller/PID Controller/N Copy/Disabled wSignal Specification'\r\n * '<S36>'  : 'Controller/PID Controller/N Gain/Disabled'\r\n * '<S37>'  : 'Controller/PID Controller/P Copy/Disabled'\r\n * '<S38>'  : 'Controller/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S39>'  : 'Controller/PID Controller/Reset Signal/Disabled'\r\n * '<S40>'  : 'Controller/PID Controller/Saturation/Enabled'\r\n * '<S41>'  : 'Controller/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S42>'  : 'Controller/PID Controller/Sum/Sum_PI'\r\n * '<S43>'  : 'Controller/PID Controller/Sum Fdbk/Disabled'\r\n * '<S44>'  : 'Controller/PID Controller/Tracking Mode/Disabled'\r\n * '<S45>'  : 'Controller/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S46>'  : 'Controller/PID Controller/Tsamp - Integral/Passthrough'\r\n * '<S47>'  : 'Controller/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S48>'  : 'Controller/PID Controller/postSat Signal/Forward_Path'\r\n * '<S49>'  : 'Controller/PID Controller/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* RTW_HEADER_Controller_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"C:\\Users\\Mohand\\Desktop\\MBSE\\DC_Motor_Position_Control\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Controller'.\r\n *\r\n * Model version                  : 2.11\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun 29 00:34:01 2022\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};